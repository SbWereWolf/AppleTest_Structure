using System;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using MSSqlDataSource.Properties;

#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MSSqlDataSource
{
    [Database(Name="AppleStructure")]
	public partial class StructureDatabaseDataContext : DataContext
	{
		
		private static MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertHierarchy(Hierarchy instance);
    partial void UpdateHierarchy(Hierarchy instance);
    partial void DeleteHierarchy(Hierarchy instance);
    partial void InsertContent(Content instance);
    partial void UpdateContent(Content instance);
    partial void DeleteContent(Content instance);
    #endregion
		
		public StructureDatabaseDataContext() : 
				base(Settings.Default.AppleStructureConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public StructureDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StructureDatabaseDataContext(IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StructureDatabaseDataContext(string connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public StructureDatabaseDataContext(IDbConnection connection, MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Table<Hierarchy> Hierarchies
		{
			get
			{
				return this.GetTable<Hierarchy>();
			}
		}
		
		public Table<Content> Contents
		{
			get
			{
				return this.GetTable<Content>();
			}
		}
	}
	
	[Table(Name="dbo.Hierarchy")]
	public partial class Hierarchy : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private Nullable<long> _Parent;
		
		private EntitySet<Content> _Contents;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentChanging(Nullable<long> value);
    partial void OnParentChanged();
    #endregion
		
		public Hierarchy()
		{
			this._Contents = new EntitySet<Content>(new Action<Content>(this.attach_Contents), new Action<Content>(this.detach_Contents));
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Parent", DbType="BigInt")]
		public Nullable<long> Parent
		{
			get
			{
				return this._Parent;
			}
			set
			{
				if ((this._Parent != value))
				{
					this.OnParentChanging(value);
					this.SendPropertyChanging();
					this._Parent = value;
					this.SendPropertyChanged("Parent");
					this.OnParentChanged();
				}
			}
		}
		
		[Association(Name="Hierarchy_Content", Storage="_Contents", ThisKey="Id", OtherKey="Hierarchy")]
		public EntitySet<Content> ContentsAssociation
		{
			get
			{
				return this._Contents;
			}
			set
			{
				this._Contents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.HierarchyAssociation = this;
		}
		
		private void detach_Contents(Content entity)
		{
			this.SendPropertyChanging();
			entity.HierarchyAssociation = null;
		}
	}
	
	[Table(Name="dbo.Content")]
	public partial class Content : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private Nullable<float> _ContentValue;
		
		private long _Hierarchy;
		
		private EntityRef<Hierarchy> _Hierarchy1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentValueChanging(Nullable<float> value);
    partial void OnContentValueChanged();
    partial void OnHierarchyChanging(long value);
    partial void OnHierarchyChanged();
    #endregion
		
		public Content()
		{
			this._Hierarchy1 = default(EntityRef<Hierarchy>);
			OnCreated();
		}
		
		[Column(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="Content", Storage="_ContentValue", DbType="Real")]
		public Nullable<float> ContentValue
		{
			get
			{
				return this._ContentValue;
			}
			set
			{
				if ((this._ContentValue != value))
				{
					this.OnContentValueChanging(value);
					this.SendPropertyChanging();
					this._ContentValue = value;
					this.SendPropertyChanged("ContentValue");
					this.OnContentValueChanged();
				}
			}
		}
		
		[Column(Storage="_Hierarchy", DbType="BigInt NOT NULL")]
		public long Hierarchy
		{
			get
			{
				return this._Hierarchy;
			}
			set
			{
				if ((this._Hierarchy != value))
				{
					if (this._Hierarchy1.HasLoadedOrAssignedValue)
					{
						throw new ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnHierarchyChanging(value);
					this.SendPropertyChanging();
					this._Hierarchy = value;
					this.SendPropertyChanged("Hierarchy");
					this.OnHierarchyChanged();
				}
			}
		}
		
		[Association(Name="Hierarchy_Content", Storage="_Hierarchy1", ThisKey="Hierarchy", OtherKey="Id", IsForeignKey=true)]
		public Hierarchy HierarchyAssociation
		{
			get
			{
				return this._Hierarchy1.Entity;
			}
			set
			{
				Hierarchy previousValue = this._Hierarchy1.Entity;
				if (((previousValue != value) 
							|| (this._Hierarchy1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hierarchy1.Entity = null;
						previousValue.ContentsAssociation.Remove(this);
					}
					this._Hierarchy1.Entity = value;
					if ((value != null))
					{
						value.ContentsAssociation.Add(this);
						this._Hierarchy = value.Id;
					}
					else
					{
						this._Hierarchy = default(long);
					}
					this.SendPropertyChanged("HierarchyAssociation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
